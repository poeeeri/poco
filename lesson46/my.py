import asyncio
import io
import logging
import traceback
from pprint import pprint
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import BoundFilter
from datetime import datetime, timedelta, time
import requests
from aiogram.utils.exceptions import BadRequest

from config import token, WEATHER_API

bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


class AdminFilter(BoundFilter):
    async def check(self, message: types.Message):
        member = await message.chat.get_member(message.from_user.id)
        return member.is_chat_admin()


class IsGroup(BoundFilter):
    async def check(self, message: types.Message):
        return message.chat.type in (
            types.ChatType.GROUP,
            types.ChatType.SUPERGROUP
        )


async def set_default_commands(dp: Dispatcher):
    await dp.bot.set_my_commands([
        types.BotCommand('set_photo', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ'),
        types.BotCommand('set_title', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'),
        types.BotCommand('ro', 'read only'),
        types.BotCommand('unro', 'read only off'),
    ])


@dp.message_handler(IsGroup(), AdminFilter(), commands="set_photo")
async def set_new_photo(message: types.Message):
    photo = message.reply_to_message.photo[-1]
    photo = await photo.download(destination=io.BytesIO())
    input_file = types.InputFile(path_or_bytesio=photo)
    await message.chat.set_photo(photo=input_file)


@dp.message_handler(IsGroup(), commands='ban')
async def ban_user(message: types.Message):
    try:
        member = message['reply_to_message']['from']['id']
        await bot.kick_chat_member(message.chat.id, member)

        chat_id = message.chat.id
        await message.chat.kick(user_id=member)
        await message.reply(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")

    except Exception as err:
        print(message.as_json())
        await message.reply(traceback.format_exc())
        await message.reply(f"–≤—ã –Ω–µ –∞–¥–º–∏–Ω")


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç {message.new_chat_members[0].full_name}, –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã–µ –ø–æ–ª–∏—Ç–∏—á–∏—Å–∫–∏–µ —Å–ø–æ—Ä—ã")


@dp.message_handler(content_types=types.ContentType.LEFT_CHAT_MEMBER)
async def ban_member(message: types.Message):
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.left_chat_member.full_name}, –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")


@dp.message_handler(IsGroup(), AdminFilter(), commands='unban')
async def unban_user(message: types.Message):
    print(message.as_json())
    member = message['reply_to_message']['from']['id']
    name = message['reply_to_message']['from']['first_name']
    chat_id = message.chat.id
    try:
        await message.chat.unban(user_id=member)
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω')
        await member
        service_message = await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥')
        await asyncio.sleep(5)
        await message.delete()
        await service_message.delete()
    except BadRequest:
        await message.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω')


import re
import datetime


dp.filters_factory.bind(AdminFilter)


# @dp.message_handler(IsGroup(), AdminFilter(), commands='ro')
# async def read_only_mode(message: types.Message):
#     member = message['external_reply']['origin']['sender_user']['id']
#     chat_id = message.chat.id
#     command_parse = re.compile(r'(!ro|/ro) ?(\d+)? ?([a-zA-Z ])+?')
#     parsed = command_parse.match(message.text)
#     print(message.as_json())
#     time = parsed.group(2)
#     comment = parsed.group(3)
#     if not time:
#         time = 5
#     else:
#         time = int(time)
#     until_date = datetime.datetime.now() + datetime.timedelta(minutes=time)
#     ReadOnlyPermission = types.ChatPermissions(
#         can_send_messages=False,
#         can_send_media_messages=False,
#         can_send_polls=False,
#         can_invite_users=False,
#         can_pin_messages=False,
#         can_change_info=False,
#         can_add_web_page_previews=False,
#     )
#     try:
#         await bot.restrict_chat_member(chat_id, user_id=member, permissions=ReadOnlyPermission, until_date=until_date)
#         await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.get_mention(as_html=True)} –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ {time} –º–∏–Ω—É—Ç
#         –ø–æ –ø—Ä–∏—á–∏–Ω–µ {comment}')
#     except BadRequest:
#         logging.error(f'BadRequest {BadRequest}')
#         await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º')
#         service_message = await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥')
#         await asyncio.sleep(5)
#         await message.delete()
#         await service_message.delete


@dp.message_handler(IsGroup(), AdminFilter(), commands='ro')
async def read_only_mode(message: types.Message):
    print(message.as_json())
    if not message.reply_to_message:
        if not message['reply_to_message']['from']['id']:
            member = message['external_reply']['origin']['sender_user']['id']
        else:
            member = message['reply_to_message']['from']['id']
    else:
        member = message.reply_to_message.from_user.id

    chat_id = message.chat.id
    command_parse = re.compile(r'(!ro|/ro) ?(\d+)? ?([a-zA-Z ])+?')
    parsed = command_parse.match(message.text)
    print(message.as_json())
    name = message['reply_to_message']['from']['username']
    time = 1
    reason = '—à—Ç–æ –∑–∞ –ª–µ–≤ —ç—Ç–æ—Ç —Ç–∏–≥–∞—Ä'
    until_date = datetime.datetime.now() + datetime.timedelta(minutes=time)

    ReadOnlyPermission = types.ChatPermissions(
        can_send_messages=False,
        can_send_media_messages=False,
        can_send_polls=False,
        can_invite_users=False,
        can_pin_messages=False,
        can_change_info=False,
        can_add_web_page_previews=False,
    )
    try:
        await bot.restrict_chat_member(chat_id, user_id=member, permissions=ReadOnlyPermission, until_date=until_date)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name} –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ {time} –º–∏–Ω—É—Ç '
                             f'–ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}')
    except BadRequest as e:
        logging.error(f'BadRequest {e}')
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º')
    service_message = await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥')
    await asyncio.sleep(5)
    await message.delete()
    await service_message.delete()

# @dp.message_handler()
# async def del_m(message: types.Message):
#    await bot.delete_message(message.chat.id, message.message_id)

#
commands = [
    types.BotCommand(command='cube', description='—Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫—É–±–∏–∫–∞'),
    types.BotCommand(command='bascetball', description='—Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞'),
    types.BotCommand(command='drotiki', description='—Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥—Ä–æ—Ç–∏–∫–æ–≤'),
    types.BotCommand(command='football', description='—Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞'),
    types.BotCommand(command='bascetball', description='—Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞'),
    types.BotCommand(command='casino', description='—Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫–∞–∑–∏–Ω–æ'),
    types.BotCommand(command='weather', description='—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π –≤ —É—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'),
]


async def set_default_commands(dp: Dispatcher):
    await dp.bot.set_my_commands([
       types.BotCommand('set_photo', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≤ –≥—Ä—É–ø–ø–µ'),
       types.BotCommand('set_title', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã'),
       types.BotCommand('ro', 'read only'),
       types.BotCommand('unro', 'read only off'),
       types.BotCommand('dice', 'read only off'),
       types.BotCommand('casino', 'read only off'),
    ])


@dp.message_handler(IsGroup(), commands='set_photo')
async def set_new_photo(message: types.Message):
    source_message = message.reply_to_message
    photo = source_message.photo[-1]
    photo = await photo.download(destination=io.BytesIO())
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–µ –≤ –æ–±—ä–µ–∫—Ç–µ
    input_file = types.InputFile(path_or_bytesio=photo)
    await message.chat.set_photo(photo=input_file)


@dp.message_handler(commands='about')
async def about(message: types.Message):
    await message.answer('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n'
                        '/bascetball - —Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞\n'
                        '/cube - —Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫—É–±–∏–∫–∞ \n'
                        '/drotiki - —Å–∫–∏–¥—ã–≤–∞–µ—Ç –¥—Ä–æ—Ç–∏–∫–æ–≤ \n'
                        '/football - —Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞ \n'
                        '/casino - —Å–∫–∏–¥—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫–∞–∑–∏–Ω–æ')


@dp.message_handler(commands='set_cmds')
async def set_cmds(message: types.Message):
    await message.answer('–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    await bot.set_my_commands(commands)


@dp.message_handler(commands='cube')
async def dice(message: types.Message):
    await message.reply_dice('üé≤')
    print(message.reply_to_message.as_json())


@dp.message_handler(commands='drotiki')
async def dice(message: types.Message):
    await message.reply_dice('üéØ')


@dp.message_handler(commands='casino')
async def dice(message: types.Message):
    await message.reply_dice('üé∞')


@dp.message_handler(commands='football')
async def dice(message: types.Message):
    await message.reply_dice('‚öΩ')


@dp.message_handler(commands='bascetball')
async def dice(message: types.Message):
    await message.reply_dice('üèÄ')


@dp.message_handler(commands='weather')
async def echo(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–Ø—Å–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        par = {
            "lang": "ru",
            "lat": 51.8261,
            "lon": 107.6098,
            "appid": WEATHER_API,
            "units": "metric"
        }
        r = requests.get(
            f'https://api.openweathermap.org/data/2.5/weather?q=Ulan-Ude&appid={WEATHER_API}&units=metric')
        data = r.json()
        city = data['name']
        cur_weather = data['main']['temp']
        r_hourly = requests.get('http://api.openweathermap.org/data/2.5/forecast?', params=par)
        re = requests.get(f'http://api.openweathermap.org/geo/1.0/direct?q=Ulan-Ude,643&appid={WEATHER_API}')
        pprint(re)

        weather_description = data['weather'][0]['main']
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ —Å–∞–º'
        humidity = data['main']["humidity"]
        pressure = data['main']['pressure']
        sunrise_timestamp = datetime.date.fromtimestamp(data['sys']['sunrise']).strftime('–≤ %H:%M')
        sunset_timestamp = datetime.date.fromtimestamp(data['sys']['sunset']).strftime('–≤ %H:%M')
        length_of_the_day = datetime.date.fromtimestamp(data['sys']['sunset']) - \
                            datetime.date.fromtimestamp(data['sys']['sunrise'])
        wind = data['wind']['speed']
        await message.answer(f'***{datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}***\n'
                             f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n'
                             f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/c\n'
                             f'–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n'
                             f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –±—Ä–∞—Ç–∫–∏!\n\n\n')
        forecast = r_hourly.json().get('list')[:5]

        # for i in forecast:
        #     dt = i.get('dt_txt')
        #     print(dt, ':')
        #
        #     print("–ë—É–¥–µ—Ç {}".format(i.get("weather")[0].get("description")))
        #     print("–ü–æ–¥—Ä–æ–±–Ω–æ:")
        #     print("	–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", i.get("main").get("temp"), "*C")
        #     print("	–í–ª–∞–∂–Ω–æ—Å—Ç—å:", i.get("main").get("humidity"), "%")
        #     press = int(i.get("main").get("pressure"))
        #     print("	–î–∞–≤–ª–µ–Ω–∏–µ(–º–º.—Ä—Ç.—Å—Ç):", press / 133)
        #     print("-----------------------------------------------------------------------------")
        x = 0
        for i in forecast:
            dt = i.get('dt_txt')
            x += 3

            des = "–ë—É–¥–µ—Ç {}".format(i.get("weather")[0].get("description"))
            temp = i.get("main").get("temp")
            print("	–í–ª–∞–∂–Ω–æ—Å—Ç—å:", i.get("main").get("humidity"), "%")
            press = int(i.get("main").get("pressure"))
            print("	–î–∞–≤–ª–µ–Ω–∏–µ(–º–º.—Ä—Ç.—Å—Ç):", press / 133)
            print("-----------------------------------------------------------------------------")
            time = datetime.datetime.now() + timedelta(hours=x)
            await message.answer(f'{str(time)[:16]}:\n'
                                 f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}C¬∞\n'
                                 f'{des}')

            # temp = i.get("main").get("temp")
            # des = i.get("weather")[0].get("description")
            # pprint(dt)
    except Exception as err:
        await message.reply('–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞!')
        await message.reply(traceback.format_exc())
        pprint(data)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
